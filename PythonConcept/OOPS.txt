THIS FILE CONTAINS NOTES ON OOPS 

@classmethod
--> this function transforms the regular instance method to a classmethod
--> the main diffrence between instance method and a classmethod is that:
-->INSTANCE METHOD : is bound to the bound to an instance and has access to instance attributes
--> CLASS METHOD : is bound to the class and has access to the class attributes
---EXPLAIN CLASSMETHOD TO A CHILD---
-->Imagine you have a toy factory that makes different types of toys: cars, dolls, and robots.  The factory itself has a big list of all the toys it has ever made.
Now, you want to make a new car toy. You wouldn't ask a specific car toy to make another car, right? You would tell the factory, "Hey factory, make me a new car!" The factory knows how to make cars, so it would create one and add it to its big list of all toys.
In Python code, the @classmethod is like saying "Hey factory!" It's a way to tell the whole class (the toy factory) to do something, like create a new toy.

THE __INIT__ METHOD
-->explanation to a child : Imagine you have a toy robot, and every time you get a new one, you need to give it a name and a color. The __init__ method is like the instructions you follow when you first get the robot. When you create a new robot, you tell it, “Your name is Robbie, and your color is blue.” This way, every new robot knows its name and color right from the start.
-->to an expert : The __init__ method in Python is a special method, also known as a constructor, that is automatically invoked when a new instance of a class is created. Its primary role is to initialize the instance’s attributes and perform any setup required for the object.
